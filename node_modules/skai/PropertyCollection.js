var Entity;
var Delta;

exports.setEntity = function(e) {
	Entity = e;
}

exports.setDelta = function(d) {
	Delta = d;
}

var PropertyCollection = function(propertyName, entityGuid) {
	var self = this;
	self.setPropertyName(propertyName);
	self.setEntityGuid(entityGuid);
}

var PCP = function() {}

PCP.prototype = new Array;
PCP.prototype.propertyName = "";
PCP.prototype.entityGuid = "";
PCP.prototype.setPropertyName = function(name) { this.propertyName = name; }
PCP.prototype.setEntityGuid = function(guid) { this.entityGuid = guid; }
PCP.prototype.deltas = [];

PCP.prototype.toArray = function() {
	var retVal = [];
	for (var i = 0; i < this.length; i++ ) {
		retVal.push(this[i]);
	}
	
	return retVal;
}

PCP.prototype.push = function () {
	
	var values = [];
	for (var key in arguments) {
		var val = arguments[key];
		if (val instanceof Entity) {
			val = "g\\" + val.guid;
		}
		values.push(val);
	}
	
	this.deltas.push(new Delta(this.entityGuid, this.propertyName, values, "INSERT"))
    return Array.prototype.push.apply(this, values);
}

	PCP.prototype._push = function () {
	    return Array.prototype.push.apply(this, arguments);
	}

PCP.prototype.unshift = function() {
	
	var values = [];
	for (var key in arguments) {
		var val = arguments[key];
		if (val instanceof Entity) {
			val = "g\\" + val.guid;
		}
		values.push(val);
	}
	
	this.deltas.push(new Delta(this.entityGuid, this.propertyName, values, "INSERT"));
	return Array.prototype.unshift.apply(this, arguments);
}

	PCP.prototype._unshift = function() {
		return Array.prototype.unshift.apply(this, arguments);
	}

PCP.prototype.pop = function() {
	
	var poppedValue = Array.prototype.pop.apply(this, arguments);

	var value = poppedValue;
	if (value instanceof Entity) {
		value = "g\\" + value.guid;
	}

	this.deltas.push(new Delta(this.entityGuid, this.propertyName, value, "REMOVE"));

	return poppedValue;
}

	PCP.prototype._pop = function() {
		return Array.prototype.pop.apply(this, arguments);
	}


PCP.prototype.shift = function() {
	var shiftedValue = Array.prototype.shift.apply(this, arguments);
	
	var value = shiftedValue;
	if (value instanceof Entity) {
		value = "g\\" + value.guid;
	}
	
	this.deltas.push(new Delta(this.entityGuid, this.propertyName, value, "REMOVE"));

	return shiftedValue;
}

	PCP.prototype._shift = function() {
		return Array.prototype.shift.apply(this, arguments);
	}

PCP.prototype.splice = function () {
	var splicedElements = Array.prototype.splice.apply(this, arguments);
	
	var values = [];
	for (var key in splicedElements) {
		var e = splicedElements[key];
		if (e instanceof Entity) {
			e = "g\\" + e.guid;
		}
		
		values.push(e);
	}
	
	this.deltas.push(new Delta(this.entityGuid, this.propertyName, values, "REMOVE"));

	return splicedElements;
}

	PCP.prototype._splice = function () {
		return Array.prototype.splice.apply(this, arguments);
	}
	
PCP.prototype.setQuietly = function(value) {
	if (value instanceof Array) {
		for (var key in value) {
			this._push(value[key]);
		}
	} else {
		this._push(value);
	}
}

PCP.prototype.toString = function() {
	return "[PropertyCollection " + this.propertyName + " length: " + this.length +"]"
}

PropertyCollection.prototype = new PCP();

exports.PropertyCollection = PropertyCollection;